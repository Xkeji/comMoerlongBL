<?php
//-------------------------------声明-------------------------------------------
// <auto-generated>
//     此文件是自动生成的文件，对这个文件的任何修改在下次自动生成的时候都会丢失。
//     模板名称：{{StateMachine}}Action.php.tt
//     生成日期：2019-03-22 16:41:27
// </auto-generated>
//------------------------------------------------------------------------------
namespace comMoerlongBL\agreement\stateMachines;

use comMoerlongBL\core\stateMachines\StateMachineException;
use comMoerlongBL\agreement\enums\EnumAgreementSettlementState;

/**
 * 协议客户结算状态机
 * 
 * 客户结算状态机
 */
class AgreementSettlementStateAction
{
		
	/**
     * @Notes 创建
     * @Interface 新创建一份协议时，完成业务及客户结算状态改变。
     *
     * @param $entity 新建
     *
     * @return entity
     * @throws StateMachineException
     */
	public static function aCreate(IAgreementSettlementState $entity)
	{       
		if (!empty($entity->getAgreementSettlementState())) {
            throw new StateMachineException("当前状态必须是 未设置 时才可使用。");
        }
            
		$entity->setAgreementSettlementState(EnumAgreementSettlementState::Initial);
        return $entity;
    }
		
	/**
     * @Notes 创建
     * @Interface 协议关闭业务完成时，同时执行此方法（二选一），协议业务完成并关闭，改变状态客户结算状态至等待
     *
     * @param $entity 业务完成
     *
     * @return entity
     * @throws StateMachineException
     */
	public static function aFinishT(IAgreementSettlementState $entity)
	{       
		if ($entity->getAgreementSettlementState() != EnumAgreementSettlementState::Initial) {
            throw new StateMachineException(
                sprintf(
                    "当前状态必须是 %d: %s 时才可使用。",                    
                    EnumAgreementSettlementState::Initial,
                    EnumAgreementSettlementState::getDescription(EnumAgreementSettlementState::Initial)                    
                )
            );
        }
		
            
		$entity->setAgreementSettlementState(EnumAgreementSettlementState::Waiting);
        return $entity;
    }
		
	/**
     * @Notes 创建
     * @Interface 协议关闭业务完成时，同时执行此方法（二选一），协议业务完成并关闭，改变状态客户结算状态至关闭
     *
     * @param $entity 业务完成
     *
     * @return entity
     * @throws StateMachineException
     */
	public static function aFinishF(IAgreementSettlementState $entity)
	{       
		if ($entity->getAgreementSettlementState() != EnumAgreementSettlementState::Initial) {
            throw new StateMachineException(
                sprintf(
                    "当前状态必须是 %d: %s 时才可使用。",                    
                    EnumAgreementSettlementState::Initial,
                    EnumAgreementSettlementState::getDescription(EnumAgreementSettlementState::Initial)                    
                )
            );
        }
		
            
		$entity->setAgreementSettlementState(EnumAgreementSettlementState::Closed);
        return $entity;
    }
		
	/**
     * @Notes 创建
     * @Interface 
     *
     * @param $entity 
     *
     * @return entity
     * @throws StateMachineException
     */
	public static function ainvalidAGreementT(IAgreementSettlementState $entity)
	{       
		if ($entity->getAgreementSettlementState() != EnumAgreementSettlementState::Initial) {
            throw new StateMachineException(
                sprintf(
                    "当前状态必须是 %d: %s 时才可使用。",                    
                    EnumAgreementSettlementState::Initial,
                    EnumAgreementSettlementState::getDescription(EnumAgreementSettlementState::Initial)                    
                )
            );
        }
		
            
		$entity->setAgreementSettlementState(EnumAgreementSettlementState::Waiting);
        return $entity;
    }
		
	/**
     * @Notes 创建
     * @Interface 协议无效签单时，同时执行此方法（二选一），无效签单关闭协议订单时，同时改变订单结算状态至关闭
     *
     * @param $entity 无效签单
     *
     * @return entity
     * @throws StateMachineException
     */
	public static function ainvalidAGreementF(IAgreementSettlementState $entity)
	{       
		if ($entity->getAgreementSettlementState() != EnumAgreementSettlementState::Initial) {
            throw new StateMachineException(
                sprintf(
                    "当前状态必须是 %d: %s 时才可使用。",                    
                    EnumAgreementSettlementState::Initial,
                    EnumAgreementSettlementState::getDescription(EnumAgreementSettlementState::Initial)                    
                )
            );
        }
		
            
		$entity->setAgreementSettlementState(EnumAgreementSettlementState::Closed);
        return $entity;
    }
		
	/**
     * @Notes 创建
     * @Interface 协议取消签单时，同时执行此方法（二选一），改变状态至客户结算状态至等待，描述见《协议订单子订单状态维护规则》文档
     *
     * @param $entity 取消签单
     *
     * @return entity
     * @throws StateMachineException
     */
	public static function aCancelAgreementT(IAgreementSettlementState $entity)
	{       
		if ($entity->getAgreementSettlementState() != EnumAgreementSettlementState::Initial) {
            throw new StateMachineException(
                sprintf(
                    "当前状态必须是 %d: %s 时才可使用。",                    
                    EnumAgreementSettlementState::Initial,
                    EnumAgreementSettlementState::getDescription(EnumAgreementSettlementState::Initial)                    
                )
            );
        }
		
            
		$entity->setAgreementSettlementState(EnumAgreementSettlementState::Waiting);
        return $entity;
    }
		
	/**
     * @Notes 创建
     * @Interface 协议取消签单时，同时执行此方法（二选一），改变状态至客户结算状态至关闭，描述见《协议订单子订单状态维护规则》文档
     *
     * @param $entity 取消签单
     *
     * @return entity
     * @throws StateMachineException
     */
	public static function aCancelAgreementF(IAgreementSettlementState $entity)
	{       
		if ($entity->getAgreementSettlementState() != EnumAgreementSettlementState::Initial) {
            throw new StateMachineException(
                sprintf(
                    "当前状态必须是 %d: %s 时才可使用。",                    
                    EnumAgreementSettlementState::Initial,
                    EnumAgreementSettlementState::getDescription(EnumAgreementSettlementState::Initial)                    
                )
            );
        }
		
            
		$entity->setAgreementSettlementState(EnumAgreementSettlementState::Closed);
        return $entity;
    }
		
	/**
     * @Notes 创建
     * @Interface 取消关闭，描述见《协议订单子订单状态维护规则》文档
     *
     * @param $entity 取消关闭
     *
     * @return entity
     * @throws StateMachineException
     */
	public static function aCancelClosed(IAgreementSettlementState $entity)
	{       
		if ($entity->getAgreementSettlementState() != EnumAgreementSettlementState::Waiting) {
            throw new StateMachineException(
                sprintf(
                    "当前状态必须是 %d: %s 时才可使用。",                    
                    EnumAgreementSettlementState::Waiting,
                    EnumAgreementSettlementState::getDescription(EnumAgreementSettlementState::Waiting)                    
                )
            );
        }
		
            
		$entity->setAgreementSettlementState(EnumAgreementSettlementState::Initial);
        return $entity;
    }
		
	/**
     * @Notes 创建
     * @Interface 协议的客户结算，比如处理生成财务单据等
     *
     * @param $entity 协议客户结算
     *
     * @return entity
     * @throws StateMachineException
     */
	public static function aSCustomerSettlement(IAgreementSettlementState $entity)
	{       
		if ($entity->getAgreementSettlementState() != EnumAgreementSettlementState::Waiting) {
            throw new StateMachineException(
                sprintf(
                    "当前状态必须是 %d: %s 时才可使用。",                    
                    EnumAgreementSettlementState::Waiting,
                    EnumAgreementSettlementState::getDescription(EnumAgreementSettlementState::Waiting)                    
                )
            );
        }
		
            
		$entity->setAgreementSettlementState(EnumAgreementSettlementState::Running);
        return $entity;
    }
		
	/**
     * @Notes 创建
     * @Interface 协议的财务结算，比如和客户依据生成的单据，结算费用等等
     *
     * @param $entity 协议财务结算
     *
     * @return entity
     * @throws StateMachineException
     */
	public static function aSFinancialSettlement(IAgreementSettlementState $entity)
	{       
		if ($entity->getAgreementSettlementState() != EnumAgreementSettlementState::Running) {
            throw new StateMachineException(
                sprintf(
                    "当前状态必须是 %d: %s 时才可使用。",                    
                    EnumAgreementSettlementState::Running,
                    EnumAgreementSettlementState::getDescription(EnumAgreementSettlementState::Running)                    
                )
            );
        }
		
            
		$entity->setAgreementSettlementState(EnumAgreementSettlementState::Closed);
        return $entity;
    }
   
}
